syntax = "proto3";

service RaftService{

  // Functions called by the servers.
  rpc RequestVote (RequestVoteMessage) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesMessage) returns (AppendEntriesResponse);

  // Functions called by the client.
  rpc GetLeader(GetLeaderMessage) returns (GetLeaderResponse);
  rpc Suspend(SuspendMessage) returns (SuspendResponse);
}

// Candidate server sends its term and id to request a vote from another server.
message RequestVoteMessage {
  int32 term = 1;
  int32  candidateId = 2;
}
// Server responds to candidate with its term and result: True if it votes for it, false if not.
message RequestVoteResponse {
  int32 term = 1;
  bool result = 2;
}
// Leader server sends its term and id to append entries/ send a heartbeat empty message.
message AppendEntriesMessage {
  int32 term = 1;
  int32  leaderId = 2;
}
// Follower server receives the request from leader with Success or Failure if it's in a higher term now.
message AppendEntriesResponse {
  int32 term = 1;
  bool result = 2;
}

// Client requests to know the leader from a server.
message GetLeaderMessage{}

// Server responds with leader id and address, or {-1, -1} if there's no current leader.
message GetLeaderResponse{
  int32 leaderId = 1;
  string leaderAddress = 2;
}

// Client requests that server gets suspended for 'period' seconds.
message SuspendMessage{
  int32 period = 1;
}
// Server sleeps for 'period' seconds and returns nothing.
message SuspendResponse {}
